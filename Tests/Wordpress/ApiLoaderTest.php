<?php

namespace Hypebeast\WordpressBundle\Tests\Wordpress;

use Hypebeast\WordpressBundle\Wordpress\ApiLoader;

require_once 'vfsStream/vfsStream.php';
use vfsStream;
use vfsStreamWrapper;
use vfsStreamFile;

/**
 * Test class for ApiLoader.
 * Generated by PHPUnit on 2011-10-03 at 13:00:03.
 * 
 * @covers Hypebeast\WordpressBundle\Wordpress\ApiLoader
 */
class ApiLoaderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ApiLoader
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        vfsStream::setup('mockWordpress');
        $this->object = new ApiLoader(vfsStream::url('mockWordpress'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testLoadIncludesDefaultBootstrap()
    {
        $file = new vfsStreamFile('wp-load.php');
        $this->assertNotEmpty($file->write('<?php return "wp-load loaded";'));
        vfsStreamWrapper::getRoot()->addChild($file);
        
        $this->assertEquals('wp-load loaded', $this->object->load());
    }
    
    public function testLoadIncludesSpecifiedBootstrap()
    {
        $file = new vfsStreamFile('bootstrap.php');
        $this->assertNotEmpty($file->write('<?php return "bootstrap loaded";'));
        vfsStreamWrapper::getRoot()->addChild($file);
        
        $this->assertEquals('bootstrap loaded', $this->object->load('bootstrap.php'));
    }
    
    public function testLoadSetsGlobals()
    {
        unset($GLOBALS['globalA']);
        unset($GLOBALS['globalB']);
        
        $file = new vfsStreamFile('wp-load.php');
        $this->assertNotEmpty($file->write('<?php $globalA = "a"; $globalB = "b";'));
        vfsStreamWrapper::getRoot()->addChild($file);
        
        $this->object->load();
        
        $this->assertEquals('a', $GLOBALS['globalA']);
        unset($GLOBALS['globalA']);
        $this->assertEquals('b', $GLOBALS['globalB']);
        unset($GLOBALS['globalB']);
    }
    
    public function testLoadDoesNotGlobaliseLocalVariables() {
        vfsStreamWrapper::getRoot()->addChild(new vfsStreamFile('wp-load.php'));
        
        $this->object->load();
        
        $this->assertFalse(isset($GLOBALS['bootstrap']));
        $this->assertFalse(isset($GLOBALS['returnValue']));
    }
    
    /**
     * @expectedException Symfony\Component\HttpFoundation\File\Exception\FileNotFoundException
     */
    public function testLoadThrowsExceptionForMissingBootstrap()
    {
        $this->object->load('bootstrap.php');
    }

}

?>
