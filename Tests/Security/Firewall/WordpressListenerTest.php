<?php

namespace Hypebeast\WordpressBundle\Tests\Security\Firewall;

use Hypebeast\WordpressBundle\Security\Firewall\WordpressListener;

/**
 * Test class for WordpressListener.
 * Generated by PHPUnit on 2011-09-28 at 18:59:27.
 */
class WordpressListenerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var WordpressListener
     */
    protected $object;
    
    protected $wordpress_url = 'expected-wordpress-url';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->securityContext
                = $this->getMock('Symfony\\Component\\Security\\Core\\SecurityContextInterface');
        $this->authenticationManager = $this->getMock(
                'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface');
        
        $this->object = new WordpressListener(
                $this->wordpress_url,
                $this->securityContext,
                $this->authenticationManager
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testHandleSuccessfulAuthenticationRequest() {
        $request = $this->getMock('Symfony\\Component\\HttpFoundation\\Request');
        $request->cookies = $this->getMock('Symfony\\Component\\HttpFoundation\\ParameterBag');
        $request->cookies->expects($this->once())->method('get')
                ->with('wordpress_logged_in_' . md5($this->wordpress_url))
                ->will($this->returnValue(
                    implode('|', array('expected username', 'expected expiration', 'expected hmac'))
                ));
        
        $event = $this->getMockBuilder('Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent')
                ->disableOriginalConstructor()->getMock();
        $event->expects($this->once())->method('getRequest')->will($this->returnValue($request));
        
        $token = $this->getMock(
                'Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface');
        # A WordpressUserToken should get instantiated and authenticated
        $this->authenticationManager->expects($this->once())->method('authenticate')
                ->with($this->logicalAnd(
                    $this->isInstanceOf(
                        'Hypebeast\\WordpressBundle\\Security\\Authentication\\Token\\WordpressUserToken'
                    ),
                    $this->attributeEqualTo('user', 'expected username'),
                    $this->attributeEqualTo('expiration', 'expected expiration'),
                    $this->attributeEqualTo('hmac', 'expected hmac')
                ))->will($this->returnValue($token));
        
        # The authenticated token should get set
        $this->securityContext->expects($this->once())->method('setToken')->with($token);
        
        $this->object->handle($event);
    }

}

?>
