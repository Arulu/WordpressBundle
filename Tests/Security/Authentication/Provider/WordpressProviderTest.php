<?php

namespace Hypebeast\WordpressBundle\Tests\Security\Authentication\Provider;

use Hypebeast\WordpressBundle\Security\Authentication\Provider\WordpressProvider;

/**
 * Test class for WordpressProvider.
 * Generated by PHPUnit on 2011-09-29 at 14:41:47.
 * 
 * @covers Hypebeast\WordpressBundle\Security\Authentication\Provider\WordpressProvider
 */
class WordpressProviderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var WordpressProvider
     */
    protected $object;
    
    /**
     *
     * @var UserProviderInterface
     */
    protected $user_provider;
    
    /**
     *
     * @var string
     */
    protected $key;
    
    /**
     *
     * @var string
     */
    protected $salt;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->user_provider = $this->getMock(
                'Symfony\\Component\\Security\\Core\\User\\UserProviderInterface');
        $this->object = new WordpressProvider(
                $this->user_provider, $this->key = 'dummy key', $this->salt = 'dummy salt');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testAuthenticateValidUser() {
        $username = 'jemima';
        $password = 'Password123456';
        $expiration = "time's up";
        
        $token = $this->getMockToken($username, $password, $expiration);
        $user = $this->getMockUser($username, $password);
        
        $this->user_provider->expects($this->any())->method('loadUserByUsername')->with($username)
                ->will($this->returnValue($user));
        
        $key = hash_hmac(
                'md5',
                $username . substr($password, 8, 4) . '|' . $expiration,
                $this->key . $this->salt
        );
        $hash = hash_hmac('md5', $username . '|' . $expiration, $key);
        $token->expects($this->any())->method('getHmac')->will($this->returnValue($hash));
        
        # We should get back a WordpressUserToken, be marked as authenticated, and be set as the user
        $result = $this->object->authenticate($token);
        $this->assertInstanceOf(
                'Hypebeast\\WordpressBundle\\Security\\Authentication\\Token\\WordpressUserToken',
                $result
        );
        $this->assertEquals($user, $result->getUser());
    }

    /**
     * @expectedException Symfony\Component\Security\Core\Exception\AuthenticationException
     */
    public function testAuthenticateMismatchedToken() {
        $username = 'jemima';
        $password = 'Password123456';
        $expiration = "time's up";
        
        $token = $this->getMockToken($username, $password, $expiration);
        $user = $this->getMockUser($username, $password);
        $this->user_provider->expects($this->any())->method('loadUserByUsername')->with($username)
                ->will($this->returnValue($user));

        $token->expects($this->any())->method('getHmac')->will($this->returnValue('incorrectHmac'));
        
        $this->object->authenticate($token);
    }

    public function testSupports() {
        $this->assertTrue($this->object->supports(
                new \Hypebeast\WordpressBundle\Security\Authentication\Token\WordpressUserToken));
        
        $this->assertFalse($this->object->supports($this->getMockForAbstractClass(
                'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AbstractToken')));
    }



    protected function getMockToken($username, $password, $expiration) {
        $token = $this->getMock(
                'Hypebeast\\WordpressBundle\\Security\\Authentication\\Token\\WordpressUserToken');
        
        $token->expects($this->any())->method('getUsername')->will($this->returnValue($username));
        $token->expects($this->any())->method('getExpiration')
                ->will($this->returnValue($expiration));
        
        return $token;
    }
    
    protected function getMockUser($username, $password) {
        $user = $this->getMock('Symfony\\Component\\Security\\Core\\User\\UserInterface');

        $user->expects($this->any())->method('getPassword')->will($this->returnValue($password));
        $user->expects($this->any())->method('getUsername')->will($this->returnValue($username));
        $user->expects($this->any())->method('getRoles')->will($this->returnValue(array()));
        
        return $user;
    }
}

?>
