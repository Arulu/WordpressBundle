<?php

namespace Hypebeast\WordpressBundle\Tests\Security\User;

use Hypebeast\WordpressBundle\Security\User\WordpressUserProvider;

/**
 * Test class for WordpressUserProvider.
 * Generated by PHPUnit on 2011-10-21 at 09:46:07.
 * 
 * @covers Hypebeast\WordpressBundle\Security\User\WordpressUserProvider
 */
class WordpressUserProviderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var WordpressUserProvider
     */
    protected $object;
    
    protected $api;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->api = $this->getMockBuilder('Hypebeast\\WordpressBundle\\Wordpress\\ApiAbstraction')
                ->setMethods(array('get_user_by'))->disableOriginalConstructor()->getMock();
        $this->object = new WordpressUserProvider($this->api);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testLoadUserByUsernameReturnsWordpressUser()
    {
        $expectedUser = $this->getMock('\\WP_User');
        $expectedUser->user_login = 'bob.hoskins';
        $expectedUser->user_email = 'bobE@hoskinator.com';
        $this->api->expects($this->any())->method('get_user_by')
                ->with('login', $expectedUser->user_login)->will($this->returnValue($expectedUser));
        
        $return = $this->object->loadUserByUsername($expectedUser->user_login);
        $this->assertInstanceOf('Hypebeast\\WordpressBundle\\Security\\User\\WordpressUser', $return);
        $this->assertEquals($expectedUser->user_login, $return->getUsername());
        $this->assertAttributeEquals($expectedUser->user_email, 'user_email', $return);
    }
    
    /**
     * @expectedException Symfony\Component\Security\Core\Exception\UsernameNotFoundException
     */
    public function testLoadUserByUsernameThrowsExceptionForMissingUser()
    {
        $this->api->expects($this->any())->method('get_user_by')
                ->with('login', $username = 'alan.davies')->will($this->returnValue(false));
        
        $this->object->loadUserByUsername($username);
    }
    
    public function testRefreshUserReturnsUpdatedUser()
    {
        $expectedUser = $this->getMockBuilder('\\WP_User')
                ->disableOriginalConstructor()->getMock();
        $expectedUser->user_email = 'steveo@stephenfry.com';
        $this->api->expects($this->any())->method('get_user_by')
                ->with('login', $username = 'stephen.fry')->will($this->returnValue($expectedUser));
        
        $user = $this->getMockBuilder('Hypebeast\\WordpressBundle\\Security\\User\\WordpressUser')
                ->disableOriginalConstructor()->getMock();
        $user->expects($this->any())->method('getUsername')->will($this->returnValue($username));
        
        $return = $this->object->refreshUser($user);
        $this->assertInstanceOf('Hypebeast\\WordpressBundle\\Security\\User\\WordpressUser', $return);
        $this->assertAttributeEquals($expectedUser->user_email, 'user_email', $return);
    }

    /**
     * @expectedException Symfony\Component\Security\Core\Exception\UnsupportedUserException
     */
    public function testRefreshUserThrowsExceptionForUnsupportedUser()
    {
        $this->object->refreshUser(
                $this->getMock('Symfony\\Component\\Security\\Core\\User\UserInterface'));
    }

    public function testSupportsClass()
    {
        $this->assertTrue($this->object->supportsClass('Hypebeast\\WordpressBundle\\Security\\User\\WordpressUser'));
        $this->assertFalse($this->object->supportsClass('Hypebeast\\WordpressBundle\\Entity\\User'));
        $this->assertFalse($this->object->supportsClass('Symfony\\Component\\Security\\Core\\User\\User'));
    }

}